"""
Mega-Sena Generator - Gerador Inteligente de Combina√ß√µes para Mega-Sena
=======================================================================

Este m√≥dulo implementa um gerador inteligente de combina√ß√µes para a Mega-Sena usando
o framework Streamlit. O sistema gera combina√ß√µes baseadas em jogos de refer√™ncia,
seguindo regras espec√≠ficas de distribui√ß√£o de n√∫meros.

Desenvolvido por Chrystiano (https://github.com/Chrystiano)
Vers√£o: 1.0.0-alpha
Reposit√≥rio: https://github.com/Chrystiano/mega-sena-generator

Funcionalidades principais:
    - Processamento de jogos de refer√™ncia em formato texto
    - Gera√ß√£o de novas combina√ß√µes usando algoritmos inteligentes
    - Valida√ß√£o autom√°tica seguindo regras oficiais da Mega-Sena
    - Interface web amig√°vel e responsiva
    - C√°lculo autom√°tico do custo total da aposta
"""

import streamlit as st
import random
from datetime import datetime
from typing import List, Dict, Optional, Set
from collections import Counter
import re


class Jogo:
    """
    Classe que representa um jogo da Mega-Sena.

    Esta classe mant√©m as informa√ß√µes de um jogo individual, incluindo os n√∫meros
    escolhidos, identificador √∫nico, nome do apostador e metadados adicionais.
    Implementa as fun√ß√µes necess√°rias para compara√ß√£o e uso em estruturas de dados.

    Atributos:
        id (str): Identificador √∫nico do jogo (timestamp + n√∫mero aleat√≥rio)
        nome (str): Nome do apostador (limitado a 50 caracteres)
        numeros (List[int]): Lista ordenada com os 6 n√∫meros do jogo
        timestamp (datetime): Data e hora da cria√ß√£o do jogo
        metadata (Dict): Dicion√°rio com metadados adicionais do jogo
        metricas (Dict): Dicion√°rio com m√©tricas calculadas do jogo
    """

    def __init__(self, numeros: List[int], nome: str = "", metadata: Dict = None):
        self.id = f"{datetime.now().timestamp()}-{random.randint(1000, 9999)}"
        self.nome = nome[:50].strip()
        self.numeros = sorted(numeros)
        self.timestamp = datetime.now()
        self.metadata = metadata or {}
        self.metricas = {}

    def __hash__(self):
        """Permite uso do objeto em sets e como chave em dicion√°rios."""
        return hash(tuple(self.numeros))

    def __eq__(self, other):
        """Define quando dois jogos s√£o considerados iguais."""
        if not isinstance(other, Jogo):
            return False
        return set(self.numeros) == set(other.numeros)

    def validar(self):
        """
        Valida se o jogo est√° de acordo com as regras b√°sicas da Mega-Sena.

        Raises:
            ValueError: Se alguma regra b√°sica for violada
        """
        if len(self.numeros) != 6:
            raise ValueError("Um jogo deve conter exatamente 6 n√∫meros.")
        if not all(1 <= n <= 60 for n in self.numeros):
            raise ValueError("Todos os n√∫meros devem estar no intervalo de 1 a 60.")
        if len(set(self.numeros)) != 6:
            raise ValueError("Os n√∫meros de um jogo n√£o podem se repetir.")


class GeradorJogos:
    """
    Classe para gerenciar a gera√ß√£o de jogos √∫nicos.

    Esta classe mant√©m controle de todos os jogos gerados e fornece m√©todos
    para garantir a unicidade das combina√ß√µes.

    Attributes:
        jogos_gerados (Set[Jogo]): Conjunto de todos os jogos j√° gerados
    """

    def __init__(self):
        self.jogos_gerados: Set[Jogo] = set()

    def adicionar_jogo(self, jogo: Jogo) -> bool:
        """
        Adiciona um jogo ao conjunto de jogos gerados se ele n√£o existir.
        
        Args:
            jogo (Jogo): O jogo a ser adicionado

        Returns:
            bool: True se o jogo foi adicionado, False se j√° existia
        """
        if jogo in self.jogos_gerados:
            return False
        self.jogos_gerados.add(jogo)
        return True

    def gerar_combinacao_unica(
        self, 
        numeros_disponiveis: List[int], 
        tamanho: int = 6, 
        max_tentativas: int = 1000
    ) -> Optional[Jogo]:
        """
        Gera uma combina√ß√£o √∫nica de n√∫meros.
        
        Args:
            numeros_disponiveis (List[int]): Lista de n√∫meros dispon√≠veis para sorteio
            tamanho (int): Quantidade de n√∫meros em cada combina√ß√£o
            max_tentativas (int): N√∫mero m√°ximo de tentativas antes de desistir

        Returns:
            Optional[Jogo]: Novo jogo √∫nico ou None se n√£o for poss√≠vel gerar
        """
        tentativas = 0
        while tentativas < max_tentativas:
            combinacao = sorted(random.sample(numeros_disponiveis, tamanho))
            jogo = Jogo(numeros=combinacao)
            try:
                validar_distribuicao(jogo)
                if self.adicionar_jogo(jogo):
                    return jogo
            except ValueError:
                pass
            tentativas += 1
        return None


def validar_distribuicao(jogo: Jogo):
    """
    Valida a distribui√ß√£o dos n√∫meros em um jogo seguindo regras espec√≠ficas.

    Args:
        jogo (Jogo): Objeto Jogo a ser validado

    Raises:
        ValueError: Se alguma regra de distribui√ß√£o for violada
    """
    baixos = [n for n in jogo.numeros if 1 <= n <= 30]
    altos = [n for n in jogo.numeros if 31 <= n <= 60]

    if not (2 <= len(baixos) <= 4 and 2 <= len(altos) <= 4):
        raise ValueError("Jogo deve conter entre 2-4 n√∫meros baixos e 2-4 n√∫meros altos.")

    dezenas = Counter(n // 10 for n in jogo.numeros)
    if max(dezenas.values()) > 3:
        raise ValueError("Jogo n√£o pode ter mais de 3 n√∫meros da mesma dezena.")

    terminacoes = Counter(n % 10 for n in jogo.numeros)
    if max(terminacoes.values()) > 2:
        raise ValueError("Jogo n√£o pode ter mais de 2 n√∫meros com a mesma termina√ß√£o.")


def gerar_combinacoes_tipo_a(jogos_referencia: List[Jogo], gerador: GeradorJogos) -> List[Jogo]:
    """
    Retorna os jogos de refer√™ncia originais, registrando-os no gerador.

    Args:
        jogos_referencia (List[Jogo]): Lista de jogos originais
        gerador (GeradorJogos): Inst√¢ncia do gerador para controle de unicidade

    Returns:
        List[Jogo]: Os mesmos jogos de refer√™ncia fornecidos
    """
    for jogo in jogos_referencia:
        gerador.adicionar_jogo(jogo)
    return jogos_referencia


def gerar_combinacoes_tipo_b(
    jogos_referencia: List[Jogo], 
    num_combinacoes: int, 
    gerador: GeradorJogos
) -> List[Jogo]:
    """
    Gera combina√ß√µes tipo B garantindo unicidade.

    Args:
        jogos_referencia (List[Jogo]): Lista de jogos originais
        num_combinacoes (int): Quantidade de novas combina√ß√µes a serem geradas
        gerador (GeradorJogos): Inst√¢ncia do gerador para controle de unicidade

    Returns:
        List[Jogo]: Lista com as novas combina√ß√µes geradas
    """
    combinacoes = []
    numeros_referencia = [n for jogo in jogos_referencia for n in jogo.numeros]
    
    while len(combinacoes) < num_combinacoes:
        jogo = gerador.gerar_combinacao_unica(numeros_referencia)
        if jogo:
            combinacoes.append(jogo)
        else:
            st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel gerar mais combina√ß√µes √∫nicas do tipo B. Geradas {len(combinacoes)} de {num_combinacoes}.")
            break
    
    return combinacoes


def gerar_combinacoes_tipo_c(
    jogos_referencia: List[Jogo], 
    num_combinacoes: int, 
    gerador: GeradorJogos
) -> List[Jogo]:
    """
    Gera combina√ß√µes tipo C garantindo unicidade.

    Args:
        jogos_referencia (List[Jogo]): Lista de jogos originais
        num_combinacoes (int): Quantidade de novas combina√ß√µes a serem geradas
        gerador (GeradorJogos): Inst√¢ncia do gerador para controle de unicidade

    Returns:
        List[Jogo]: Lista com as novas combina√ß√µes geradas
    """
    combinacoes = []
    numeros_referencia = [n for jogo in jogos_referencia for n in jogo.numeros]
    todos_numeros = set(range(1, 61))
    numeros_novos = list(todos_numeros - set(numeros_referencia))
    
    while len(combinacoes) < num_combinacoes:
        base = random.sample(numeros_referencia, random.randint(1, 2))
        novos = random.sample(numeros_novos, 6 - len(base))
        jogo = Jogo(numeros=sorted(base + novos))
        
        try:
            validar_distribuicao(jogo)
            if gerador.adicionar_jogo(jogo):
                combinacoes.append(jogo)
        except ValueError:
            continue
            
        if len(combinacoes) < num_combinacoes and not novos:
            st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel gerar mais combina√ß√µes √∫nicas do tipo C. Geradas {len(combinacoes)} de {num_combinacoes}.")
            break
    
    return combinacoes


def processar_dados_entrada(conteudo: str) -> List[Jogo]:
    """
    Processa dados de entrada em formato texto para criar objetos Jogo.

    O formato esperado √©:
    01 02 03 04 05 06 (Nome)
    07 08 09 10 11 12 (Outro Nome)

    Args:
        conteudo (str): Texto contendo os jogos no formato especificado

    Returns:
        List[Jogo]: Lista de objetos Jogo criados a partir do texto

    Raises:
        ValueError: Se algum jogo n√£o estiver no formato correto
    """
    jogos = []
    linhas = conteudo.strip().split("\n")
    for linha in linhas:
        match = re.match(r"((?:\d{2}\s){5}\d{2})\s*\((.*?)\)", linha)
        if match:
            numeros = list(map(int, match.group(1).split()))
            nome = match.group(2)
            jogo = Jogo(numeros=numeros, nome=nome)
            jogo.validar()
            jogos.append(jogo)
    return jogos


# Configura√ß√£o da Interface Streamlit
st.set_page_config(page_title="Gerador Mega-Sena", page_icon="üé≤")
st.title("üé≤ Gerador de Combina√ß√µes Mega-Sena")

# Estiliza√ß√£o CSS personalizada
st.markdown(
    """
    <style>
    .stTextArea {
        border-radius: 10px;
        border: 2px solid #4CAF50;
    }
    .stButton button {
        background-color: #4CAF50;
        color: white;
        border-radius: 10px;
        font-size: 16px;
        padding: 10px 20px;
    }
    .stAlert {
        background-color: #f9f9f9;
        border-left: 5px solid #4CAF50;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# Inicializa√ß√£o do estado da aplica√ß√£o
if "jogos_referencia" not in st.session_state:
    st.session_state["jogos_referencia"] = []
if "multiplicador" not in st.session_state:
    st.session_state["multiplicador"] = None
if "mensagem_sucesso" not in st.session_state:
    st.session_state["mensagem_sucesso"] = False

# Campo para entrada de dados
conteudo_colado = st.text_area(
    "üìã Cole os dados no formato abaixo:",
    height=200,
    placeholder="03 08 11 14 16 29 (Janine)\n06 30 32 33 40 60 (Giselle)",
)

# Processamento dos dados
if st.button("üîÑ Processar Dados"):
    try:
        jogos_referencia = processar_dados_entrada(conteudo_colado)
        st.session_state.jogos_referencia = jogos_referencia
        st.session_state.mensagem_sucesso = False
        st.success(f"‚úÖ {len(jogos_referencia)} jogos processados com sucesso!")
    except ValueError as e:
        st.error(f"‚ùå Erro ao processar dados: {e}")

# Sele√ß√£o do multiplicador
if st.session_state.jogos_referencia:
    st.subheader("Selecione o multiplicador de jogos:")
    col1, col2, col3, col4, col5 = st.columns(5)
    with col1:
        if st.button("1x", key="mult_1x"):
            st.session_state["multiplicador"] = 1
    with col2:
        if st.button("2x", key="mult_2x"):
            st.session_state["multiplicador"] = 2
    with col3:
        if st.button("3x", key="mult_3x"):
            st.session_state["multiplicador"] = 3
    with col4:
        if st.button("4x", key="mult_4x"):
            st.session_state["multiplicador"] = 4
    with col5:
        if st.button("5x", key="mult_5x"):
            st.session_state["multiplicador"] = 5

    # Indicador visual do multiplicador selecionado
    if st.session_state["multiplicador"]:
        st.write(f"Multiplicador selecionado: {st.session_state['multiplicador']}x")

# Gera√ß√£o e exibi√ß√£o das combina√ß√µes
if st.session_state.jogos_referencia and st.session_state["multiplicador"]:
    multiplicador_valor = st.session_state["multiplicador"]
    jogos_referencia = st.session_state.jogos_referencia
    gerador = GeradorJogos()  # Cria inst√¢ncia √∫nica do gerador

    total_jogos = len(jogos_referencia) * multiplicador_valor
    num_jogos_b = int(total_jogos * 0.75) - len(jogos_referencia)
    num_jogos_c = total_jogos - len(jogos_referencia) - num_jogos_b

    # Gera as combina√ß√µes usando o mesmo gerador para garantir unicidade global
    combinacoes_a = gerar_combinacoes_tipo_a(jogos_referencia, gerador)
    combinacoes_b = gerar_combinacoes_tipo_b(jogos_referencia, num_jogos_b, gerador)
    combinacoes_c = gerar_combinacoes_tipo_c(jogos_referencia, num_jogos_c, gerador)

    # Verifica o total de jogos gerados
    todos_jogos = combinacoes_a + combinacoes_b + combinacoes_c
    
    if len(todos_jogos) < total_jogos:
        st.warning(f"‚ö†Ô∏è Foram gerados {len(todos_jogos)} jogos √∫nicos dos {total_jogos} solicitados.")
    
    # Exibe as combina√ß√µes do Tipo A
    st.subheader("üéØ Jogos Tipo A (Originais)")
    st.markdown("Jogos fornecidos diretamente pelos participantes.")
    col1, col2, col3 = st.columns(3)
    for i, jogo in enumerate(combinacoes_a):
        with [col1, col2, col3][i % 3]:
            st.write(f"{jogo.nome}: " + " ".join(map(lambda x: f"{x:02}", jogo.numeros)))

    # Exibe as combina√ß√µes do Tipo B
    st.subheader("üéØ Jogos Tipo B (75%)")
    st.markdown("Combina√ß√µes geradas com base nos jogos de refer√™ncia.")
    col1, col2, col3 = st.columns(3)
    for i, jogo in enumerate(combinacoes_b):
        with [col1, col2, col3][i % 3]:
            st.write(" ".join(map(lambda x: f"{x:02}", jogo.numeros)))

    # Exibe as combina√ß√µes do Tipo C
    st.subheader("üéØ Jogos Tipo C (25%)")
    st.markdown("Combina√ß√µes explorat√≥rias com novos n√∫meros.")
    col1, col2, col3 = st.columns(3)
    for i, jogo in enumerate(combinacoes_c):
        with [col1, col2, col3][i % 3]:
            st.write(" ".join(map(lambda x: f"{x:02}", jogo.numeros)))

    # Exibe o custo total
    total_custo = len(todos_jogos) * 5
    st.markdown(f"**üí∞ Custo Total da Aposta: R$ {total_custo},00**")

    # Gera arquivo com todos os jogos
    all_games = []
    for jogo in todos_jogos:
        all_games.append(" ".join(map(lambda x: f"{x:02}", jogo.numeros)))

    # Cria o conte√∫do do arquivo
    file_content = "\n".join(all_games)

    # Bot√£o de download
    st.download_button(
        label="üì• Baixar Todos os Jogos",
        data=file_content,
        file_name="mega_sena_jogos.txt",
        mime="text/plain",
        key="download_button"
    )

    if st.session_state.mensagem_sucesso:
        st.success("‚úÖ Arquivo gerado com sucesso! Boa sorte! üçÄüéâ")
